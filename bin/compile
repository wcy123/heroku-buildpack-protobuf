#!/usr/bin/env bash

set -eo pipefail
function export_env_dir() {
  env_dir=$1
  whitelist_regex=${2:-''}
  blacklist_regex=${3:-'^(PATH|GIT_DIR|CPATH|CPPATH|LD_PRELOAD|LIBRARY_PATH)$'}
  if [ -d "$env_dir" ]; then
    for e in $(ls $env_dir); do
      echo "$e" | grep -E "$whitelist_regex" | grep -qvE "$blacklist_regex" &&
      export "$e=$(cat $env_dir/$e)"
      :
    done
  fi
}
function log-step() {
    echo "-----> $@"
}

function log() {
    echo "$@" | sed -u 's/^/       /'
}

function die() {
    echo " !     $@"
    exit 1
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

export_env_dir $ENV_DIR
mkdir -p $CACHE_DIR

if [ "${VENDOR_PROTOBUF+1}" == 1 ]; then
    # install protobuf into slug if VENDOR_PROTOBUF is set
    VENDOR_DIR=$BUILD_DIR/.heroku/vendor
    log-step "installing protobuf into slug's /.heroku/vendor"
else
    # otherwise keep it in the cache dir
    VENDOR_DIR=$CACHE_DIR/.heroku/vendor
    log-step "installing protobuf"
fi
mkdir -p $VENDOR_DIR

mkdir -p /app/.heroku

ln -sTf $VENDOR_DIR /app/.heroku/vendor

# install protobuf
CACHED_PROTOBUF_TARBALL="$CACHE_DIR/protobuf.tgz"
if [ -z "$PROTOBUF_TARBALL_URL" ]; then
    PROTOBUF_TARBALL_URL=https://protobuf.s3.amazonaws.com/protobuf-2.4.1.tgz
fi

log "downloading protobuf from $PROTOBUF_TARBALL_URL"
if [ -f $CACHED_PROTOBUF_TARBALL ]; then
    MD5=($(md5sum $CACHED_PROTOBUF_TARBALL))
    MD5_HEADER=("-H" "If-None-Match: $MD5")
else
    MD5_HEADER=()
fi

curl -sfSo $CACHED_PROTOBUF_TARBALL \
    "${MD5_HEADER[@]}" $PROTOBUF_TARBALL_URL

tar xzf $CACHED_PROTOBUF_TARBALL -C $VENDOR_DIR
